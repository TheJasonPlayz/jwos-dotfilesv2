#+TITLE: XMonad Config
#+AUTHOR: Jason Whitman
#+PROPERTY: header-args :tangle xmonad.hs
#+auto_tangle: t

* XMonad Configuration
** Imports
#+begin_src haskell 
import Colors.DoomOne

import qualified Data.Map as M
import Data.Maybe
import Data.Char
import System.IO
import XMonad
import XMonad.Actions.CycleWS
import XMonad.Actions.GridSelect
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotAllDown, rotSlavesDown)
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.SetWMName
import XMonad.Hooks.StatusBar
import XMonad.Hooks.StatusBar.PP
import XMonad.Layout.Grid
import XMonad.Layout.Hidden
import XMonad.Layout.LayoutModifier
import XMonad.Layout.Magnifier
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Spiral
import XMonad.Layout.ThreeColumns
import XMonad.Layout.WindowArranger (windowArrange, WindowArrangerMsg(..))
import XMonad.Layout.WindowNavigation
import XMonad.Layout.Spacing
import XMonad.Layout.ResizableTile
import qualified XMonad.StackSet as W
import XMonad.Util.EZConfig
import XMonad.Util.Loggers
import XMonad.Util.NamedActions
import XMonad.Util.Run
import XMonad.Util.Ungrab
import XMonad.Util.SpawnOnce
#+end_src
** Variables
#+begin_src haskell
  windowCount :: X (Maybe String)
  windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset

  myFocusColor = color15
  myNormColor   = colorBack
  myBorderWidth = 2

  normWorkspaces      = ["chat", "dev", "www", "hacking", "music", "img", "vid", "gaming", "writing", "configs"]
  hackathonWorkspaces = ["www", "chat", "zoom", "design", "dev", "present", "vid", "img", "music"]
  myWorkspaces        = normWorkspaces

  myTerminal = "LIBGL_ALWAYS_SOFTWARE=1 alacritty"
  myEmacs    = "emacs -c -a 'emacs'"
#+end_src
** Main Function
#+begin_src haskell
    main :: IO ()
    main = do
      xmproc0 <- spawnPipe ("xmobar -x 0 ~/.config/xmobar/doom-one-xmobarrc")
      xmonad $
	addDescrKeys ((mod1Mask, xK_h), showKeybindings) myKeys $
	  ewmh
	    def
	      { manageHook = myManageHook <+> manageDocks,
		terminal = myTerminal,
		modMask = mod4Mask,
		startupHook = myStartupHook,
		layoutHook = myLayoutHook,
		workspaces = myWorkspaces,
		borderWidth = myBorderWidth,
		normalBorderColor = myNormColor,
		focusedBorderColor = myFocusColor,
		logHook = dynamicLogWithPP $ xmobarPP
		{ ppOutput = \x -> hPutStrLn xmproc0 x, -- xmobar on monitor 1
		  ppCurrent =
		  xmobarColor color06 "" . wrap ("<box type=Bottom width=2 mb=2 color=" ++ color06 ++ ">")
			      "</box>",
			-- Visible but not current workspace
			ppVisible = xmobarColor color06 "" . clickable,
			-- Hidden workspace
			ppHidden =
			  xmobarColor color05 ""
			    . wrap
			      ("<box type=Top width=2 mt=2 color=" ++ color05 ++ ">")
			      "</box>"
			    . clickable,
			-- Hidden workspaces (no windows)
			ppHiddenNoWindows = xmobarColor color05 "" . clickable,
			-- Title of active window
			ppTitle = xmobarColor color16 "" . shorten 60,
			-- Separator character
			ppSep = "<fc=" ++ color09 ++ "> <fn=1>|</fn> </fc>",
			-- Urgent workspace
			ppUrgent = xmobarColor color02 "" . wrap "!" "!",
			-- Adding   of windows on current workspace to the bar
			ppExtras = [windowCount],
			-- order of things in xmobar
			ppOrder = \(ws : l : t : ex) -> [ws, l] ++ ex ++ [t]
		      }
	      }
#+end_src
** Hooks
*** Clickable Workspaces
#+begin_src haskell
    clickable ws = "<action=xdotool key super+" ++ show i ++ ">" ++ ws ++ "</action>"
      where
	i = fromJust $ M.lookup ws myWorkspaceIndices

    myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1 ..]
#+end_src
*** Manage Hook
#+begin_src haskell
    myManageHook :: ManageHook
  myManageHook =
      composeAll
	[ className =? "Gimp" --> doFloat,
	  isDialog --> doFloat
	]
#+end_src
*** Startup Hook
#+begin_src haskell
  myStartupHook = do
    -- Set Window Manager Name
    setWMName "LG3D"

    -- Background / System Tray
    spawn "pulseaudio"
    spawn "picom"
    spawn "nm-applet"
    spawn "volumeicon"
    spawn "cbatticon"
    spawn "redshift -l 38.973320:-104.622971"

    -- Apps
    spawn "flameshot"
    spawn "discord"
    spawn "emacs --daemon"

    -- Conky and Trayer
    spawnOnce ("sleep 2 && conky -c $HOME/.config/conky/xmonad/" ++ colorScheme ++ "-91.conkyrc")
    spawnOnce ("sleep 2 && trayer --edge top --align right --widthtype request --padding 6 --SetDockType true --SetPartialStrut true --expand true --monitor 1 --transparent true --iconspacing 5 --alpha 0 --height 22 " ++ colorTrayer)

    spawn "nitrogen --restore &"

    spawn "xmodmap ~/.Xmodmap"
#+end_src
*** Layout Hook
#+begin_src haskell
    myLayoutHook = avoidStruts (hiddenWindows (tiled ||| Mirror tiled ||| Full ||| threeCol ||| Mirror threeCol ||| spirals ||| Mirror spirals ||| Grid))
      where
	threeCol = ThreeColMid nmaster delta ratio
	tiled = Tall nmaster delta ratio
	spirals = spiral (6 / 7)
	nmaster = 1 -- Default number of windows in the master pane
	ratio = 1 / 2 -- Default proportion of screen occupied by master pane
	delta = 3 / 100 -- Percent of screen to increment by when resizing panes
#+end_src
*** Subtitles  
#+begin_src haskell
    subtitle' ::  String -> ((KeyMask, KeySym), NamedAction)
    subtitle' x = ((0,0), NamedAction $ map toUpper
			  $ sep ++ "\n-- " ++ x ++ " --\n" ++ sep)
      where
	sep = replicate (6 + length x) '-'
#+end_src
** Keybindings
*** Show Keybindings
#+begin_src haskell
    showKeybindings :: [((KeyMask, KeySym), NamedAction)] -> NamedAction
    showKeybindings x = addName "Show Keybindings" $ io $ do
      h <- spawnPipe $ "yad --text-info --fontname=\"SauceCodePro Nerd Font Mono 12\" --fore= 46d9ff --back= 000000 --center --geometry=1200x800 --title \"XMonad keybindings\""
      --hPutStr h (unlines $ showKm x) -- showKM adds ">>" before subtitles
      hPutStr h (unlines $ showKmSimple x) -- showKmSimple doesn't add ">>" to subtitles
      hClose h
      return ()
#+end_src
*** Mouse Bindings
#+begin_src
    myMouseBindings (XConfig {XMonad.modMask = modm}) =
      M.fromList $
	-- mod-button1, Set the window to floating mode and move by dragging
	[ ( (modm, button1),
	    ( \w ->
		focus w >> mouseMoveWindow w
		  >> windows W.shiftMaster
	    )
	  ),
	  -- mod-button2, Raise the window to the top of the stack
	  ((modm, button2), (\w -> focus w >> windows W.shiftMaster)),
	  -- mod-button3, Set the window to floating mode and resize by dragging
	  ( (modm, button3),
	    ( \w ->
		focus w >> mouseResizeWindow w
		  >> windows W.shiftMaster
	    )
	  )
	]
#+end_src
*** Keybindings
#+begin_src haskell
    myKeys :: XConfig l0 -> [((KeyMask, KeySym), NamedAction)]
    myKeys c =
	  let subKeys str ks = subtitle' str : mkNamedKeymap c ks in

	  subKeys "XMonad Essentials"
	  [ ("M-S-k", addName "" $ spawn "killall trayer volumeicon nm-applet"),
	    ("M-C-r", addName "" $ spawn "xmonad --recompile"), 
	    ("M-S-r", addName "" $ spawn "xmonad --restart"),
	    ("M-S-c", addName "" $ kill) ]

	  ^++^ subKeys "Programs"
	    [ ("M-S-<Return>", addName "" $ spawn "LIBGL_ALWAYS_SOFTWARE=1 alacritty"),
	    ("M-f", addName "" $ spawn "pcmanfm"),
	    ("M-e", addName "" $ spawn "emacsclient -c -a 'emacs'"),
	    ("M-p", addName "" $ spawn "rofi -show combi"),
	    ("M-a", addName "" $ spawn "alsamixer"),
	    ("M-c", addName "" $ spawn "conky -c ~/.config/conky/xmonad/doom-one-01.conkyrc"),
	    ("M-C-c", addName "" $ spawn "killall conky") ]

	    ^++^ subKeys "Workspaces"
	    [ ("M-<Right>", addName "" $ nextWS),
	    ("M-<Left>", addName "" $ prevWS),
	    ("M-<KP_Add>", addName "" $ shiftToNext),
	    ("M-<KP_Subtract>", addName "" $ shiftToPrev),
	    ("M-S-<KP_Add>", addName "" $ shiftToNext >> nextWS),
	    ("M-S-<KP_Subtract>", addName "" $ shiftToPrev >> prevWS) ]

	    ^++^ subKeys "Windows"
	    [ ("M-h", addName "" $ withFocused hideWindow),
	    ("M-S-h", addName "" $ popOldestHiddenWindow),
	    ("M-<Return>", addName "" $ windows W.focusMaster) ]

	    ^++^ subKeys "Spacing"
	    [ ("C-M1-j", addName "Decrease window spacing" $ decWindowSpacing 4),
	    ("C-M1-k", addName "Increase window spacing" $ incWindowSpacing 4),
	    ("C-M1-h", addName "Decrease screen spacing" $ decScreenSpacing 4),
	    ("C-M1-l", addName "Increase screen spacing" $ incScreenSpacing 4) ]


	    ^++^ subKeys "Window Sizing"
	    [ ("M-s", addName "Shrink window"               $ sendMessage Shrink),
	    ("M-S-x", addName "Expand window"               $ sendMessage Expand),
	    ("M-M1-s", addName "Shrink window vertically" $ sendMessage MirrorShrink),
	    ("M-M1-x", addName "Expand window vertically" $ sendMessage MirrorExpand) ]


	    ^++^ subKeys "Switch Layouts & Master Commands"
	    [ ("M-<Space>", addName "" $ sendMessage NextLayout),
	    ("M-.", addName "" $ sendMessage (IncMasterN 1)),
	    ("M-,", addName "" $ sendMessage (IncMasterN (-1))) ]

	    ^++^ subKeys "Layout Commands"
	    [ ("M-m", addName "Move focus to master window" $ windows W.focusMaster),
	    ("M-j", addName "Move focus to next window"   $ windows W.focusDown),
	    ("M-k", addName "Move focus to prev window"   $ windows W.focusUp),
	    ("M-S-m", addName "Swap focused window with master window" $ windows W.swapMaster),
	    ("M-S-j", addName "Swap focused window with next window"   $ windows W.swapDown),
	    ("M-S-k", addName "Swap focused window with prev window"   $ windows W.swapUp),
	    ("M-<Backspace>", addName "Move focused window to master"  $ promote),
	    ("M-S-<Tab>", addName "Rotate all windows except master"   $ rotSlavesDown),
	    ("M-C-<Tab>", addName "Rotate all windows current stack"   $ rotAllDown) ]

	    {-
	    ^++^ subKeys "Normal Grid Select"
	    [ ("M-M1-<Return>", addName "Select all" $ spawnSelected'
	    $   gsInternet ++ gsMultimedia ++ gsOffice ++ gsSettings ++ gsSystem ++ gsUtilities ++ gsAllHacking),
	    ("M-M1-f", addName "Select favorite apps" $ spawnSelected' gsFavorites),
	    ("M-M1-c", addName "Select all categories" $ spawnSelected' gsNormalCategories),
	    ("M-M1-t", addName "Goto selected window"        $ goToSelected $ mygridConfig myColorizer),
	    ("M-M1-b", addName "Bring selected window"       $ bringSelected $ mygridConfig myColorizer),
	    ("M-M1-1", addName "Menu of Internet apps"       $ spawnSelected' gsInternet),
	    ("M-M1-2", addName "Menu of multimedia apps"     $ spawnSelected' gsMultimedia),
	    ("M-M1-3", addName "Menu of office apps"         $ spawnSelected' gsOffice),
	     ("M-M1-4", addName "Menu of settings apps"       $ spawnSelected' gsSettings),
	     ("M-M1-5", addName "Menu of system apps"         $ spawnSelected' gsSystem),
	     ("M-M1-6", addName "Menu of utilities apps"      $ spawnSelected' gsUtilities),
	     ("M-M1-7", addName "Menu of hacking apps"        $ spawnSelected' hackingKeybindings) ]

	    ^++^ subKeys "Hacking Grid Select" 
	     [ ("M-M1-S-0", addName "Webapp" $ spawnSelected' gsWebapp)
	     , ("M-M1-S-1", addName "Fuzzer" $ spawnSelected' gsFuzzer)
	     , ("M-M1-S-2", addName "Scanner" $ spawnSelected' gsScanner)
	     , ("M-M1-S-3", addName "Proxy" $ spawnSelected' gsProxy)
	     , ("M-M1-S-4", addName "Windows" $ spawnSelected' gsWindows)
	     , ("M-M1-S-5", addName "Dos" $ spawnSelected' gsDos)
	     , ("M-M1-S-6", addName "Disassembler" $ spawnSelected' gsDisassembler)
	     , ("M-M1-S-7", addName "Cracker" $ spawnSelected' gsCracker)
	     , ("M-M1-S-8", addName "Voip" $ spawnSelected' gsVoip)
	     , ("M-M1-S-9", addName "Exploitation" $ spawnSelected' gsExploitation)
	     , ("M-M1-S-1-0", addName "Recon" $ spawnSelected' gsRecon)
	     , ("M-M1-S-1-1", addName "Spoof" $ spawnSelected' gsSpoof)
	     , ("M-M1-S-1-2", addName "Forensic" $ spawnSelected' gsForensic)
	     , ("M-M1-S-1-3", addName "Crypto" $ spawnSelected' gsCrypto)
	     , ("M-M1-S-1-4", addName "Backdoor" $ spawnSelected' gsBackdoor)
	     , ("M-M1-S-1-5", addName "Networking" $ spawnSelected' gsNetworking)
	     , ("M-M1-S-1-6", addName "Misc" $ spawnSelected' gsMisc)
	     , ("M-M1-S-1-7", addName "Defensive" $ spawnSelected' gsDefensive)
	     , ("M-M1-S-1-8", addName "Wireless" $ spawnSelected' gsWireless)
	     , ("M-M1-S-1-9", addName "Automation" $ spawnSelected' gsAutomation)
	     , ("M-M1-S-2-0", addName "Sniffer" $ spawnSelected' gsSniffer)
	     , ("M-M1-S-2-1", addName "Binary" $ spawnSelected' gsBinary)
	     , ("M-M1-S-2-2", addName "Packer" $ spawnSelected' gsPacker)
	     , ("M-M1-S-2-3", addName "Reversing" $ spawnSelected' gsReversing)
	     , ("M-M1-S-2-4", addName "Mobile" $ spawnSelected' gsMobile)
	     , ("M-M1-S-2-5", addName "Malware" $ spawnSelected' gsMalware)
	     , ("M-M1-S-2-6", addName "Code_audit" $ spawnSelected' gsCode_audit)
	     , ("M-M1-S-2-7", addName "Social" $ spawnSelected' gsSocial)
	     , ("M-M1-S-2-8", addName "Honeypot" $ spawnSelected' gsHoneypot)
	     , ("M-M1-S-2-9", addName "Hardware" $ spawnSelected' gsHardware)
	     , ("M-M1-S-3-0", addName "Fingerprint" $ spawnSelected' gsFingerprint)
	     , ("M-M1-S-3-1", addName "Decompiler" $ spawnSelected' gsDecompiler)
	     , ("M-M1-S-3-2", addName "Config" $ spawnSelected' gsConfig)
	     , ("M-M1-S-3-3", addName "Debugger" $ spawnSelected' gsDebugger)
	     , ("M-M1-S-3-4", addName "Firmware" $ spawnSelected' gsFirmware)
	     , ("M-M1-S-3-5", addName "Bluetooth" $ spawnSelected' gsBluetooth)
	     , ("M-M1-S-3-6", addName "Database" $ spawnSelected' gsDatabase)
	     , ("M-M1-S-3-7", addName "Automobile" $ spawnSelected' gsAutomobile)
	     , ("M-M1-S-3-8", addName "Nfc" $ spawnSelected' gsNfc)
	     , ("M-M1-S-3-9", addName "Tunnel" $ spawnSelected' gsTunnel)
	     , ("M-M1-S-4-0", addName "Drone" $ spawnSelected' gsDrone)
	     , ("M-M1-S-4-1", addName "Unpacker" $ spawnSelected' gsUnpacker)
	     , ("M-M1-S-4-2", addName "Radio" $ spawnSelected' gsRadio)
	     , ("M-M1-S-4-3", addName "Keylogger" $ spawnSelected' gsKeylogger)
	     , ("M-M1-S-4-4", addName "Stego" $ spawnSelected' gsStego)
	     , ("M-M1-S-4-5", addName "Anti_forensic" $ spawnSelected' gsAnti_forensic)
	     , ("M-M1-S-4-6", addName "Ids" $ spawnSelected' gsIds)
	     , ("M-M1-S-4-7", addName "Gpu" $ spawnSelected' gsGpu)
	     ]-}
#+end_src
